VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
indmeasures <- c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
[c("hd","hdk") %in% cotmeasures]
c("hd","hdk") %in% cotmeasures
expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs <- rbind(VecArgs, expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE))
VecArgs
cotmeasures
cotmeasures <- c("M0", "A", "hdk")
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
cotmeasures
indmeasures <- c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
cotmeasures <- c("M0","A","H")[c("M0","A","H") %in% cotmeasures]
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
VecArgs <- rbind(VecArgs, expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE))
VecArgs
indmeasures <- c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
cotmeasures <- c("M0","A","H")[c("M0","A","H") %in% cotmeasures]
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
VecArgs <- rbind(VecArgs, expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE))
VecArgs
devtools::check()
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(30), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE)
EST
do.call("rbind",EST)
ESTdata <- do.call("rbind",EST)
aggregate(ESTdata, by=list(loa = loa, subg = subg, k = k, measure = ESTdata[,"measure"] == "hdk"), sum, ..., simplify = TRUE, drop = TRUE)
aggregate(ESTdata, by=list(loa = loa, subg = subg, k = k, measure = ESTdata[,"measure"] == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(.~loa, data = subset(ESTdata, measure = "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(.~loa, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(.~b, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~loa + subgroup + k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~loa + subg + k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
View(ESTdata)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE)
aggregate(b~(loa*subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE)
aggregate(b~(loa*subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = "")
na.action(na.omit(c(1, NA)))
na.action(na.pass(c(1, NA)))
aggregate(b~(loa*subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
aggregate(b~(subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
aggregate(b~(subg)+loa, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
state.x77
colnames(state.x77)
aggregate(state.x77, list(Region = state.region), mean)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~cbind(loa,subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
subset(ESTdata, loa = 0, subg = area)
subset(ESTdata, loa = 0, subg = "area")
subset(ESTdata, loa == 0, subg == "area")
subset(ESTdata, subg == "area")
subset(ESTdata, subg == "area", loa == 0)
subset(ESTdata, subg == "area", loa == "0")
subset(ESTdata, subg == "area", measure == "hdk")
subset(ESTdata, subg == "area"& loa == 0)
subset(ESTdata, subg == "area"& loa == 0 & measure == "hdk")
subset(ESTdata, subg == "area"& loa == 0 & measure == "hdk", select = b)
sum(subset(ESTdata, subg == "area"& loa == 0 & measure == "hdk", select = b))
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
weights
weights["d_nutr"]
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x*weigths[x]), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x*weights[x]), simplify = TRUE, drop = FALSE, na.action = na.exclude)
ESTdata$indicator
weights[ESTdata$indicator]
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata, weights = weights[ESTdata$indicator]), measure == "hdk"),
sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
ESTdata$weights = weights[ESTdata$indicator]
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
FUN = function(x) sum(x * weights), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicators, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) x*weights, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
sum ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
mean ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) x/sum(x) ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
devtools::check()
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(30), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE)
EST
ESTdata <- do.call("rbind",EST)
ESTdata$weights = weights[ESTdata$indicator]
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
print(indicators)
print(weights)
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
# if `weights` == "equal", create nested weights
if (grepl(weights,"equal")) {
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
} else { # if `weights` is numeric and sum up to 1 (preferred weights specification)
# indicators as a vector
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
}
print(indicators)
print(weights)
ESTdata$weights = weights[ESTdata$indicator]
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
mean ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
with(ESTdata, b*weights)
with(ESTdata, actb = b*weights)
ESTdata$actb <- with(ESTdata,b*weights)
ESTdata
colnames(ESTdata)
aggregate(b*weights~., data = subset(ESTdata, measure == "hdk"),
mean ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
ESTdata$actb <- with(subset(ESTdata, measure == "hdk"),b*weights)
rm(ESTdata$actb)
actb <- subset(ESTdata, measure == "hdk")
View(actb)
actb$weights <- NULL; actb$actb
actb$weights <- NULL; actb$actb <- NULL
actb$b <- actb$b * weights[actb$indicator]
actb
weights[actb$indicator]
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE)
EST
ESTdata <- do.call("rbind",EST)
actb <- subset(ESTdata, measure == "hdk")
actb$b <- actb$b * weights[actb$indicator]
View(actb)
View(actb)
View(ESTdata)
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
ESTdata <- do.call("rbind",EST)
actb <- subset(ESTdata, measure == "hdk")
View(actb)
actb$b <- actb$b*weights[actb$indicator]
View(actb)
actb$se <- NA
View(actb)
actb$ll <- NA
actb$ul <- NA
actb$measure <- "actb"
View(actb)
usethis::create_from_github("https://github.com/girelaignacio/mpitbR.git", destdir = "~/mpitbR/")
getwd()
usethis::create_from_github("https://github.com/girelaignacio/mpitbR.git", destdir = "C:/Users/girel/OneDrive/Documentos/mpitbR")
getwd()
usethis::use_git()
usethis::use_github()
usethis::use_git()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)`
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
devtools::check()
devtools::check()
devtools::check()
measures = NULL
"M0" %in% measures
indmeasures <- c("hd","hdk","actb","pctb")
("actb" %in% indmeasures) & ("hdk" %in% indmeasures)
(("actb" %in% indmeasures) & !("hdk" %in% indmeasures))
if(("actb" %in% indmeasures) & !("hdk" %in% indmeasures)){stop("'actb' requires 'hdk' in `indmeasures`")}
indmeasures <- c("hd","actb","pctb")
if(("actb" %in% indmeasures) & !("hdk" %in% indmeasures)){stop("'actb' requires 'hdk' in `indmeasures`")}
if( (("pctb" %in% indmeasures) & !("hdk" %in% indmeasures)) | (("pctb" %in% indmeasures) & !("M0" %in% measures))){stop("'pctb' requires both 'hdk' in `indmeasures` and 'M0' in `measures`")}
(("pctb" %in% indmeasures) & !("M0" %in% measures))
(("pctb" %in% indmeasures) & !("hdk" %in% indmeasures))
indmeasures <- c("hd","hdk","actb","pctb")
(("pctb" %in% indmeasures) & !("hdk" %in% indmeasures))
(("pctb" %in% indmeasures) & !("M0" %in% measures))
devtools::check()
cotoptions <- NULL
### `cotoptions` argument ####
##
if(is.null(cotoptions)){
cotoptions <- "total"
}else{
if ( !((cotoptions == "total" | cotoptions == "insequence")) ) {cotoptions <- "total"}
}
cotoptions <- "inseq"
### `cotoptions` argument ####
##
if(is.null(cotoptions)){
cotoptions <- "total"
}else{
if ( !((cotoptions == "total" | cotoptions == "insequence")) ) {cotoptions <- "total"}
}
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
cotyear <- "year"
tvar <- "t"
years.list <- sort(unique(data[,cotyear]))
names(years.list) <- sort(as.character(unique(data[,tvar])))
years.list
min(years.list)
max(years.list)
which.min(years.list)
which.max(years.list)
class(years.list)
years.list[min(years.list)]
years.list[which.min(years.list)]
years.list[which.min(years.list) & which.min(years.list)]
years.list[which.min(years.list) & which.max(years.list)]
devtools::load_all()
data <- subset(syn_cdta, t==1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
devtools::check()
devtools::check()
devtools::check()
devtools::check()
ESTdata <- do.call("rbind",EST)
# absolute and percentual contributions
#actb
actb <- ESTdata[,ESTdata$measure == "hdk"]
# absolute and percentual contributions
#actb
actb <- ESTdata[ESTdata$measure == "hdk",]
View(actb)
devtools::check()
devtools::check()
measures
indmeasures
cat("measures", sapply(indmeasures,cat),"estimated")
cat("measures", sapply(indmeasures,print),"estimated")
cat("measures:", sapply(indmeasures,print),"estimated")
cat("measures:", measures,"estimated")
cat("measures:", indmeasures,"estimated")
devtools::load_all()
data <- subset(syn_cdta, t==1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
data <- subset(syn_cdta, t==1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
indmeasures = c("hd","hdk")
cat(paste("Indicator-specific measures:", indmeasures,"under estimation\n"))
cat(paste0("Indicator-specific measures:", indmeasures,"under estimation\n"))
cat("Indicator-specific measures:", indmeasures,"under estimation\n")
cat("Indicator-specific measures:'", indmeasures,"'under estimation\n")
cat("Indicator-specific measures: '", indmeasures,"' under estimation\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
cat("\t\t____________ ESTIMATIONS ____________\n\n")
cat("\t\t\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\n")
cat("\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\n\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t     |\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t        |\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t      |\n")
cat("\t\t------------ ESTIMATIONS ____________\n|\n")
cat("\t\t------------ ESTIMATIONS ------------ \n|\n")
cat("\t\t------------ ESTIMATIONS ------------ \n\t\t|\n")
cat("\t\t------------ ESTIMATIONS ------------ \n\t\t#\n")
cat("\t\t######### ESTIMATIONS ------------ \n\t\t#\n")
cat("\t\t######### ESTIMATIONS######### n\t\t#\n")
cat("\t\t######### ESTIMATIONS ######### n\t\t#\n")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n###########")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n###############")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS ######### \n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°\\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°\n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°\n\t\t|\n#################")
cat("\t\t******ESTIMATIONS******n\t\t\n#################")
cat("\t\t******ESTIMATIONS******\n\t\t\n
# 3) AF measures ----------------------------------------------------------
# In this section, we estimate the MPI and the two main partial AF measures
# (A and H). Confidence intervals are calculated using svyciprop() function
# from the survey R package. This functions do not provide the covariance
# matrix of the estimates when we calculate measures by year. This prevents
# from using delta method when calculating the standard errors of functions
# of the estimates over time (changes over time measures).
lframe <- NULL
if(isFALSE(nomeasures)){
cat("___________________\n")
cat("\t\t******ESTIMATIONS******\n\t\t\n)
# 3) AF measures ----------------------------------------------------------
# In this section, we estimate the MPI and the two main partial AF measures
# (A and H). Confidence intervals are calculated using svyciprop() function
# from the survey R package. This functions do not provide the covariance
# matrix of the estimates when we calculate measures by year. This prevents
# from using delta method when calculating the standard errors of functions
# of the estimates over time (changes over time measures).
lframe <- NULL
if(isFALSE(nomeasures)){
cat("___________________\n")
cat("\t\t******ESTIMATIONS******\n\t\t\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
cat("\t\t****** ESTIMATIONS ******\n\t\t\n")
cat("\t\t****** ESTIMATIONS ******\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
cat("\t\t\t****** ESTIMATIONS ******\n")
cat("\t\t     ****** ESTIMATIONS ******\n")
cat("\t\    ****** ESTIMATIONS ******\n")
cat("\t\t    ****** ESTIMATIONS ******\n")
cat("\t\t   ****** ESTIMATIONS ******\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::check()

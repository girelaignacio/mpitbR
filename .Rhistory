attr(mat,"k") <- y
mat
})
row <- c("20","abs","0")
names(row) <- c("k","measure","ann")
row$k
row["k"]
as.numeric(row["k"])
matrices <- apply(VecArgs, 1, function(row){
print(class(row))
mat <- subset(x, k == as.numeric(row["k"]) & cytpe == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
attr(mat,"k") <- y
mat
})
VecArgs <- expand.grid(list(k = k, cytpe = unique(x$ctype), ann = unique(x$ann) ), stringsAsFactors = FALSE)
VecArgs
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & cytpe == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
attr(mat,"k") <- y
mat
})
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
attr(mat,"k") <- y
mat
})
x
subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(0))
subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == 0)
x <- object
k <- unique(x$k)
measure <- unique(x$measure)
x <- x[,c("subg","loa","indicator","b","se","ctype","ann","k")]
if(any(is.na(x$indicator))){x$indicator <- NULL}
subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == 0)
subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == row["ann"])
subset(x, k == as.numeric(row["k"]))
subset(x, ctype == row["ctype"] )
subset(x, ctype == "abs" )
row["ctype"]
names(row)
VecArgs <- expand.grid(list(k = k, cytpe = unique(x$ctype), ann = unique(x$ann) ), stringsAsFactors = FALSE)
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
attr(mat,"k") <- as.numeric(row["k"])
mat
})
VecArgs <- expand.grid(list(k = k, ctype = unique(x$ctype), ann = unique(x$ann) ), stringsAsFactors = FALSE)
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
attr(mat,"k") <- as.numeric(row["k"])
mat
})
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
attr(mat,"k") <- as.numeric(row["k"])
print(mat)
mat
})
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
attr(mat,"k") <- as.numeric(row["k"]); mat$k <- NULL
attr(mat,"ctype") <- row["ctype"]; mat$ctype <- NULL
attr(mat,"ann") <- as.numeric(row["ann"]); mat$ann <- NULL
mat <- as.matrix(mat)
print(mat)
mat
})
VecArgs <- expand.grid(list(k = k, ctype = unique(x$ctype), ann = unique(x$ann) ), stringsAsFactors = FALSE)
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
attr(mat,"k") <- as.numeric(row["k"]); mat$k <- NULL
attr(mat,"ctype") <- row["ctype"]; mat$ctype <- NULL
attr(mat,"ann") <- as.numeric(row["ann"]); mat$ann <- NULL
mat <- as.matrix(mat)
print(mat)
mat
})
matrices <- apply(VecArgs, 1, function(row){
print(row)
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
attr(mat,"k") <- as.numeric(row["k"]); mat$k <- NULL
attr(mat,"ctype") <- row["ctype"]; mat$ctype <- NULL
attr(mat,"ann") <- as.numeric(row["ann"]); mat$ann <- NULL
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
print(mat)
mat
})
matrices <- apply(VecArgs, 1, function(row){
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
attr(mat,"k") <- as.numeric(row["k"]); mat$k <- NULL
attr(mat,"ctype") <- row["ctype"]; mat$ctype <- NULL
attr(mat,"ann") <- as.numeric(row["ann"]); mat$ann <- NULL
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = FALSE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
print(mat)
mat
})
matrices <- apply(VecArgs, 1, function(row){
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
print(mat)
attr(mat,"k") <- as.numeric(row["k"]); mat$k <- NULL
attr(mat,"ctype") <- row["ctype"]; mat$ctype <- NULL
attr(mat,"ann") <- as.numeric(row["ann"]); mat$ann <- NULL
print(mat)
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = TRUE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
print(mat)
mat
})
i
i = 1
summary.cotframe <- function(object, ...){
stopifnot("`summary` method is only available for one measure" = length(unique(object$measure)) == 1)
x <- object
k <- unique(x$k)
measure <- unique(x$measure)
x <- x[,c("subg","loa","indicator","b","se","ctype","ann","k")]
if(any(is.na(x$indicator))){x$indicator <- NULL}
VecArgs <- expand.grid(list(k = k, ctype = unique(x$ctype), ann = unique(x$ann) ), stringsAsFactors = FALSE)
matrices <- apply(VecArgs, 1, function(row){
mat <- subset(x, k == as.numeric(row["k"]) & ctype == row["ctype"] & ann == as.numeric(row["ann"]))
attr(mat,"k") <- as.numeric(row["k"]); mat$k <- NULL
attr(mat,"ctype") <- row["ctype"]; mat$ctype <- NULL
attr(mat,"ann") <- as.numeric(row["ann"]); mat$ann <- NULL
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(mat$subg,mat$loa,sep = ".")
mat$subg <- NULL; mat$loa <- NULL
if("indicator"%in%colnames(mat)){
rownames(mat) <- paste(rownames_mat,mat$indicator,sep = ":")
mat$indicator <- NULL} else {rownames(mat) <- rownames_mat}
# t-statistic
mat$t <- mat$b/mat$se
# p-value
degfs <- Inf
mat$p <- 2*stats::pt(mat$t, degfs, lower.tail = TRUE)*2
colnames(mat) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(mat)
mat
})
attr(matrices,"measure") <- measure
class(matrices) <- "summary.lframe"
return(matrices)
}
x <- summary.cotframe(object)
x
devtools::document()
devtools::document()
object <- (subset(cot, measure == "M0"))
summary(object)
devtools::load_all()
summary(object)
class(object)
devtools::document()
devtools::load_all()
summary(object)
class(summary(object))
devtools::load_all()
class(summary(object))
class(object)
devtools::document()
devtools::load_all()
class(summary(object))
devtools::document()
class(summary(object))
rm(list=ls())
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measures = c("M0","H"), indmeasures = c("hdk","actb","pctb"),tvar="t",
weights = "equal", over = c("area"), cotmeasures = c("M0"),multicore = TRUE)
lframe <- EST$lframe
cot <- EST$cotframe
object <- (subset(cot, measure == "M0"))
summary(object)
devtools::load_all()
summary(object)
devtools::load_all()
summary(object)
object
devtools::load_all()
summary(object)
object <- (subset(cot, measure == "M0" & ctype == "abs"))
summary(object)
object
length(unique(object$cytpe)) == 1
devtools::load_all()
object <- (subset(cot, measure == "M0" & ctype == "abs"))
summary(object)
devtools::load_all()
object <- (subset(cot, measure == "M0" & ctype == "abs"))
devtools::load_all()
summary(object)
devtools::load_all()
summary(object)
devtools::load_all()
summary(object)
rm(list=ls())
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measures = c("M0","H"), indmeasures = c("hdk","actb","pctb"),tvar="t",
weights = "equal", over = c("area"), cotmeasures = c("M0"),multicore = TRUE)
lframe <- EST$lframe
cot <- EST$cotframe
object <- (subset(cot, measure == "M0" & ctype == "abs"))
summary(object)
object <- (subset(cot, measure == "M0" & ctype == "abs" ))
object
devtools::check()
devtools::check()
rm(list=ls())
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measures = c("M0","H"), indmeasures = c("hdk","actb","pctb"),tvar="t",
weights = "equal", over = c("area"), cotmeasures = c("M0"),multicore = TRUE)
lframe <- EST$lframe
cot <- EST$cotframe
summary(subset(lframe, measure == "M0" & t == 1))
object <- (subset(cot, measure == "M0" & ctype == "abs" ))
summary(object)
rm(list=ls())
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measures = c("M0","H"), indmeasures = c("hdk","actb","pctb"),tvar="t",
weights = "equal", over = c("area"), cotmeasures = c("M0"),multicore = TRUE)
lframe <- EST$lframe
cot <- EST$cotframe
object <- (subset(cot, measure == "M0" & ctype == "abs" ))
summary(object)
object
object <- (subset(cot, measure == "M0" & ctype == "abs" & k == 3))
object <- (subset(cot, measure == "M0" & ctype == "abs" & k == 33))
summary(object)
devtools::check()
devtools::load_all()
object <- (subset(cot, measure == "M0" & ctype == "abs" & k == 33))
summary(object)
devtools::load_all()
summary(object)
devtools::load_all()
summary(object)
x <- object
k <- unique(x$k)
measure <- unique(x$measure)
ctype <-  unique(x$ctype)
ann <- unique(x$ann)
x <- x[,c("subg","loa","indicator","b","se","ctype","ann","k")]
if(any(is.na(x$indicator))){x$indicator <- NULL}
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(x$subg,x$loa,sep = ".")
x$subg <- NULL; x$loa <- NULL
if("indicator"%in%colnames(x)){
rownames(x) <- paste(rownames_mat,x$indicator,sep = ":")
x$indicator <- NULL} else {rownames(x) <- rownames_mat}
# t-statistic
x$t <- x$b/x$se
# p-value
degfs <- Inf
x$p <- 2*stats::pt(x$t, degfs, lower.tail = FALSE)*2
colnames(x) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(x)
mat
x <- object
k <- unique(x$k)
measure <- unique(x$measure)
ctype <-  unique(x$ctype)
ann <- unique(x$ann)
x <- x[,c("subg","loa","indicator","b","se")]
x
if(any(is.na(x$indicator))){x$indicator <- NULL}
x
# Convert the object into a matrix conveniently for subsequent printing
rownames_mat <- paste(x$subg,x$loa,sep = ".")
x$subg <- NULL; x$loa <- NULL
if("indicator"%in%colnames(x)){
rownames(x) <- paste(rownames_mat,x$indicator,sep = ":")
x$indicator <- NULL} else {rownames(x) <- rownames_mat}
# t-statistic
x$t <- x$b/x$se
# p-value
degfs <- Inf
x$p <- 2*stats::pt(x$t, degfs, lower.tail = FALSE)*2
colnames(x) <- c("Estimate", "Std.Err", "t-value", "Pr(>|t|)")
mat <- as.matrix(x)
mat
attr(mat,"k") <- k
attr(mat,"measure") <- measure
attr(mat,"ctype") <- ctype
attr(mat,"ann") <- ann
class(mat) <- "summary.cotframe"
print(mat)
devtools::load_all()
summary(object = )
summary(object)
devtools::load_all()
summary(subset(lframe, measure == "M0" & t == 1))
object <- (subset(cot, measure == "M0" & ctype == "abs" & k == 33))
summary(object)
object <- (subset(cot, measure == "M0" & ctype == "rel" & k == 33))
summary(object)
?mpitb.est
?mpitb.set
devtools::check()
devtools::document()
devtools::document()
?confint.lframe
devtools::document()
devtools::document()
?summary.cotframe
?summary.cotframe
?summary.cotframe
devtools::document()
?summary.cotframe
devtools::document()
?summary.lframe
devtools::check()
devtools::check()
devtools::check()
devtools::check()

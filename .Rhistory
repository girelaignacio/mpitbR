-23.591920786 - 1.96 * 1.2512915075
-23.591920786 - stats::qt(p=(1-0.95)/2, df=597,lower.tail=FALSE) * 1.2512915075
-17.5148 + stats::qnorm(p=(1-0.95)/2) * 1.1966
-17.5148 + stats::qnorm(p=(1-0.95)/2, lower.tail = F) * 1.1966
-23.591920786 - stats::qnorm(p=(1-0.95)/2, lower.tail = F) * 1.2512915075
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE)
EST
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
rm(EST)
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
devtools::load_all()
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,33), measure = c("M0","A"),
weights = "equal", over = c("area"),
cotyear = "year", tvar = "t", cotmeasures = c("M0","H"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
indmeasures = c("hd","hdk","actb","pctb")
indmeasures[c("actb","pctb")]
indmeasures[,c("actb","pctb")]
c("actb","pctb") %in% indmeasures
c("actb","pctb") == indmeasures
indmeasures[c("actb","pctb") == indmeasures]
indmeasures[c("actb","pctb") != indmeasures]
c("actb","pctb")[c("actb","pctb") %in% indmeasures]
indmeasures
indmeasures = c("hd","hdk","actb")
c("actb","pctb")[c("actb","pctb") %in% indmeasures]
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk")
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk","hd"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
indmeasures = c("hdk")
contmeasures <- c("actb","pctb")[c("actb","pctb") %in% indmeasures]
is.null(contmeasures)
class((contmeasures)
)
class(contmeasures)
contmeasures
indmeasures <- indmeasures[c("actb","pctb") != indmeasures]
na.omit(inmeasures)
na.omit(indmeasures)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
mpitb.est
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
do.call("rbind",unlist(EST,recursive = FALSE))
EST <- mpitb.est(set = SET, klist = c(20,30), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
do.call("rbind",unlist(EST,recursive = FALSE))
do.call("rbind",EST)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,30), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,30), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20,30), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
View(EST)
EST <- mpitb.est(set = SET, klist = c(30), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE, nocrosssec = TRUE)
EST
devtools::check()
`333` <- 4
rm(333)
rm(`333`)
devtools::document()
devtools::document()
warnings()
devtools::document()
usethis::use_package("stats")
devtools::document()
usethis::use_package("parallel","Suggests")
devtools::document()
indmeasures = NULL
### `indmeasures` argument ####
stopifnot("`indmeasures` must be a character vector" = (is.character(indmeasures) | is.null(indmeasures)))
indmeasures = 4
### `indmeasures` argument ####
stopifnot("`indmeasures` must be a character vector" = (is.character(indmeasures) | is.null(indmeasures)))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
cotklist = c(20,30)
cotmeasures = c("M0","A")
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
indmeasures <- c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
[c("hd","hdk") %in% cotmeasures]
c("hd","hdk") %in% cotmeasures
expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs <- rbind(VecArgs, expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE))
VecArgs
cotmeasures
cotmeasures <- c("M0", "A", "hdk")
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
cotmeasures
indmeasures <- c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
cotmeasures <- c("M0","A","H")[c("M0","A","H") %in% cotmeasures]
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
VecArgs <- rbind(VecArgs, expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE))
VecArgs
indmeasures <- c("hd","hdk")[c("hd","hdk") %in% cotmeasures]
cotmeasures <- c("M0","A","H")[c("M0","A","H") %in% cotmeasures]
# arguments to vectorize over
VecArgs <- expand.grid(list(k = cotklist, measure = cotmeasures, indicator = NA), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
VecArgs
VecArgs <- rbind(VecArgs, expand.grid(list(k = cotklist, measure = indmeasures, indicator = indicators), KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE))
VecArgs
devtools::check()
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(30), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE)
EST
do.call("rbind",EST)
ESTdata <- do.call("rbind",EST)
aggregate(ESTdata, by=list(loa = loa, subg = subg, k = k, measure = ESTdata[,"measure"] == "hdk"), sum, ..., simplify = TRUE, drop = TRUE)
aggregate(ESTdata, by=list(loa = loa, subg = subg, k = k, measure = ESTdata[,"measure"] == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(.~loa, data = subset(ESTdata, measure = "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(.~loa, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(.~b, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~loa + subgroup + k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~loa + subg + k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
View(ESTdata)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE)
aggregate(b~(loa*subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE)
aggregate(b~(loa*subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = "")
na.action(na.omit(c(1, NA)))
na.action(na.pass(c(1, NA)))
aggregate(b~(loa*subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
aggregate(b~(subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
aggregate(b~(subg)+loa, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
state.x77
colnames(state.x77)
aggregate(state.x77, list(Region = state.region), mean)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.pass)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~cbind(loa,subg), data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
subset(ESTdata, loa = 0, subg = area)
subset(ESTdata, loa = 0, subg = "area")
subset(ESTdata, loa == 0, subg == "area")
subset(ESTdata, subg == "area")
subset(ESTdata, subg == "area", loa == 0)
subset(ESTdata, subg == "area", loa == "0")
subset(ESTdata, subg == "area", measure == "hdk")
subset(ESTdata, subg == "area"& loa == 0)
subset(ESTdata, subg == "area"& loa == 0 & measure == "hdk")
subset(ESTdata, subg == "area"& loa == 0 & measure == "hdk", select = b)
sum(subset(ESTdata, subg == "area"& loa == 0 & measure == "hdk", select = b))
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = FALSE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = TRUE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~., data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"), sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
weights
weights["d_nutr"]
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x*weigths[x]), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x*weights[x]), simplify = TRUE, drop = FALSE, na.action = na.exclude)
ESTdata$indicator
weights[ESTdata$indicator]
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata, weights = weights[ESTdata$indicator]), measure == "hdk"),
sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
sum, simplify = TRUE, drop = FALSE, na.action = na.exclude)
ESTdata$weights = weights[ESTdata$indicator]
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
FUN = function(x) sum(x * weights), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k, data = subset(rbind(ESTdata), measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicators, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) sum(x), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) x*weights, simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"), simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
sum ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
mean ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
FUN = function(x) x/sum(x) ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
devtools::check()
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(30), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE)
EST
ESTdata <- do.call("rbind",EST)
ESTdata$weights = weights[ESTdata$indicator]
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
print(indicators)
print(weights)
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
# if `weights` == "equal", create nested weights
if (grepl(weights,"equal")) {
# equal weights for each dimension
weight_dim <- 1/length(indicators)
weights_dim <- rep(weight_dim, length(indicators))
# equal weights for each indicator
weights_ind <- sapply(indicators, function(x) rep(1/length(x) * weight_dim,length(x)))
# weights and indicators as ordered vectors such that each indicator match its corresponding weights
weights <- unlist(weights_ind, use.names = F)
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
} else { # if `weights` is numeric and sum up to 1 (preferred weights specification)
# indicators as a vector
indicators <- unlist(indicators, use.names = F)
names(weights) <- indicators
}
print(indicators)
print(weights)
ESTdata$weights = weights[ESTdata$indicator]
aggregate(b*weights~loa+subg+k+indicator, data = subset(ESTdata, measure == "hdk"),
mean ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
with(ESTdata, b*weights)
with(ESTdata, actb = b*weights)
ESTdata$actb <- with(ESTdata,b*weights)
ESTdata
colnames(ESTdata)
aggregate(b*weights~., data = subset(ESTdata, measure == "hdk"),
mean ,simplify = TRUE, drop = FALSE, na.action = na.exclude)
ESTdata$actb <- with(subset(ESTdata, measure == "hdk"),b*weights)
rm(ESTdata$actb)
actb <- subset(ESTdata, measure == "hdk")
View(actb)
actb$weights <- NULL; actb$actb
actb$weights <- NULL; actb$actb <- NULL
actb$b <- actb$b * weights[actb$indicator]
actb
weights[actb$indicator]
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), ann = TRUE, multicore = TRUE)
EST
ESTdata <- do.call("rbind",EST)
actb <- subset(ESTdata, measure == "hdk")
actb$b <- actb$b * weights[actb$indicator]
View(actb)
View(actb)
View(ESTdata)
devtools::load_all()
data <- subset(syn_cdta, t == 1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
ESTdata <- do.call("rbind",EST)
actb <- subset(ESTdata, measure == "hdk")
View(actb)
actb$b <- actb$b*weights[actb$indicator]
View(actb)
actb$se <- NA
View(actb)
actb$ll <- NA
actb$ul <- NA
actb$measure <- "actb"
View(actb)
usethis::create_from_github("https://github.com/girelaignacio/mpitbR.git", destdir = "~/mpitbR/")
getwd()
usethis::create_from_github("https://github.com/girelaignacio/mpitbR.git", destdir = "C:/Users/girel/OneDrive/Documentos/mpitbR")
getwd()
usethis::use_git()
usethis::use_github()

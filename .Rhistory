svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
data <- subset(syn_cdta, t==1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST
indmeasures = c("hd","hdk")
cat(paste("Indicator-specific measures:", indmeasures,"under estimation\n"))
cat(paste0("Indicator-specific measures:", indmeasures,"under estimation\n"))
cat("Indicator-specific measures:", indmeasures,"under estimation\n")
cat("Indicator-specific measures:'", indmeasures,"'under estimation\n")
cat("Indicator-specific measures: '", indmeasures,"' under estimation\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = NULL, indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(20), measure = NULL,
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
cat("\t\t____________ ESTIMATIONS ____________\n\n")
cat("\t\t\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\n")
cat("\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\n\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t\t|\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t     |\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t        |\n")
cat("\t\t____________ ESTIMATIONS ____________\n\t      |\n")
cat("\t\t------------ ESTIMATIONS ____________\n|\n")
cat("\t\t------------ ESTIMATIONS ------------ \n|\n")
cat("\t\t------------ ESTIMATIONS ------------ \n\t\t|\n")
cat("\t\t------------ ESTIMATIONS ------------ \n\t\t#\n")
cat("\t\t######### ESTIMATIONS ------------ \n\t\t#\n")
cat("\t\t######### ESTIMATIONS######### n\t\t#\n")
cat("\t\t######### ESTIMATIONS ######### n\t\t#\n")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n###########")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n###############")
cat("\t\t######### ESTIMATIONS ######### \n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS ######### \n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°\\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°\n\t\t#\n#################")
cat("\t\t°°°°°ESTIMATIONS°°°°°°\n\t\t|\n#################")
cat("\t\t******ESTIMATIONS******n\t\t\n#################")
cat("\t\t******ESTIMATIONS******\n\t\t\n
# 3) AF measures ----------------------------------------------------------
# In this section, we estimate the MPI and the two main partial AF measures
# (A and H). Confidence intervals are calculated using svyciprop() function
# from the survey R package. This functions do not provide the covariance
# matrix of the estimates when we calculate measures by year. This prevents
# from using delta method when calculating the standard errors of functions
# of the estimates over time (changes over time measures).
lframe <- NULL
if(isFALSE(nomeasures)){
cat("___________________\n")
cat("\t\t******ESTIMATIONS******\n\t\t\n)
# 3) AF measures ----------------------------------------------------------
# In this section, we estimate the MPI and the two main partial AF measures
# (A and H). Confidence intervals are calculated using svyciprop() function
# from the survey R package. This functions do not provide the covariance
# matrix of the estimates when we calculate measures by year. This prevents
# from using delta method when calculating the standard errors of functions
# of the estimates over time (changes over time measures).
lframe <- NULL
if(isFALSE(nomeasures)){
cat("___________________\n")
cat("\t\t******ESTIMATIONS******\n\t\t\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
cat("\t\t****** ESTIMATIONS ******\n\t\t\n")
cat("\t\t****** ESTIMATIONS ******\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
cat("\t\t\t****** ESTIMATIONS ******\n")
cat("\t\t     ****** ESTIMATIONS ******\n")
cat("\t\    ****** ESTIMATIONS ******\n")
cat("\t\t    ****** ESTIMATIONS ******\n")
cat("\t\t   ****** ESTIMATIONS ******\n")
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hd","hdk"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::check()
usethis::use_readme_rmd()
devvtoos::check()
devtools::check()
data <- data.frame(loa = c("nat","area","area","nat","area","area"),
subg = c("nat","0","1","nat","0","1"), measure = c("M0","M0","M0","actb","actb","actb"), b = c(0.1,0.2,0.2,0.01,0.020,0.015))
data
#pctb
# Your original data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.020, 0.015)
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) x[measure == "actb"] / x[measure == "M0"])
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) x[x$measure == "actb"] / x[x$measure == "M0"])
#pctb
# Your original data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.020, 0.015)
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) x[measure == "actb"] / x[measure == "M0"])
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
testDF
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
aggregate(x = testDF, by = list(by1, by2), FUN = function(x) x[,"v1"]/x[,"v2"])
aggregate(x = testDF, by = list(by1, by2), FUN = function(x) x[,1]/x[,2])
aggregate(x = testDF, by = list(by1, by2), FUN = function(x,y) x/y)
aggregate(x = testDF, by = list(by1, by2), FUN = function(x) x^2)
aggregate(x = testDF[,v1], by = list(by1, by2), FUN = function(x) x^2)
aggregate(x = testDF[,1], by = list(by1, by2), FUN = function(x) x^2)
aggregate(x = testDF[,1](testDF[,2]), by = list(by1, by2), FUN = function(x) x^2)
aggregate(x = testDF[,1]/testDF[,2], by = list(by1, by2), FUN = function(x) x^2)
aggregate(x = testDF[,1]/testDF[,2], by = list(by1, by2), FUN = function(x) x)
testDF
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99),
by1 = by1, by2 = by2)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
aggregate(x = testDF, by = c(by1,by2), FUN = "mean")
aggregate(v1 ~ by1 + by2, by = c(by1,by2), FUN = "mean")
aggregate(v1 ~ by1 + by2, testDF, FUN = "mean")
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99),
by1 = by1, by2 = by2)
aggregate(v1 ~ by1 + by2, testDF, FUN = "mean")
by1 <- c("red", "blue","red"" ,"blue" , "blue", "blue","red", "red, "red", "red", NA, "blue")
by2 <- c("wet", "dry", "dry", "dry", NA, "damp", "wet", "wet", "red", "damp", "dry", NA)
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99),
by1 = by1, by2 = by2)
aggregate(v1 ~ by1 + by2, testDF, FUN = "mean")
by1 <- c("red", "blue","red" ,"blue" , "blue", "blue","red", "red", "red", "red", NA, "blue")
by2 <- c("wet", "dry", "dry", "dry", NA, "damp", "wet", "wet", "red", "damp", "dry", NA)
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99),
by1 = by1, by2 = by2)
aggregate(v1 ~ by1 + by2, testDF, FUN = "mean")
aggregate(v1 ~ by1, testDF, FUN = function(x) with(testDF, x[by2 == "dry"]/x[by2 == "wet"])
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) data$x[measure == "actb"] / data$x[measure == "M0"])
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) data$x["measure" == "actb"] / data$x["measure" == "M0"])
result
0.1/0.01
0.2/0.02
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.02, 0.02)
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) sum(x[measure == "actb"]) / sum(x[measure == "M0"]))
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) sum(x[match("actb", data$measure)]) / sum(x[match("M0", data$measure)]))
# Extract the result as a vector
final_result <- result$b
# Ensure the result is c(10, 10, 10, 10, 10, 10)
identical(final_result, c(10, 10, 10, 10, 10, 10))
result
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.02, 0.02)
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) sum(x[match("actb", data$measure)]) / sum(x[match("M0", data$measure)]))
# Extract the result as a vector
final_result <- result$b
# Ensure the result is c(10, 10, 10, 10, 10, 10)
identical(final_result, c(10, 10, 10, 10, 10, 10))
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.02, 0.02)
)
data
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.02, 0.02)
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) sum(x[measure == "actb"]) / sum(x[measure == "M0"]))
# Ensure the result is c(10, 10, 10, 10, 10, 10)
identical(final_result, c(10, 10, 10))
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ measure:loa + measure:subg, data = data, FUN = function(x) x)
# Extract the result as a vector
final_result <- result$b
result
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ measure(loa + subg), data = data, FUN = function(x) x)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b:measure ~ loa + subg, data = data, FUN = function(x) x)
devtools::document()
devtools::load_all()
data <- subset(syn_cdta, t==1)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = ("actb"),
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = ("hdk","actb"),
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"),
weights = "equal", over = c("area"), multicore = TRUE)
EST$AF
EST$IND
EST$IND[,measure = "actb"]
EST$IND[,EST$measure = "actb"]
EST$IND[,EST$IND$measure = "actb"]
EST$IND[,measure == "actb"]
EST$IND[,EST$IND$measure = "actb"]
EST$IND[,EST$IND$measure == "actb"]
with(EST$IND, measure=="actb")
with(EST$IND, EST$IND[measure=="actb",])
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.02, 0.02)
)
data
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ loa + subg, data = data, FUN = function(x) with(data, data[measure=="M0",])/with(data, data[measure=="actb",]))
with(data, data[measure=="M0",])
with(data, data[measure=="actb",])
with(data, data[measure=="actb",])
actb <- with(data, data[measure=="actb",])
M0 <- with(data, data[measure=="M0",])
merge(actb,M0)
merge(actb,M0, by = "loa")
merge(actb,M0, by = c("loa","subg"))
merge(actb,M0, by = c("loa","subg","measure"))
merge(actb,M0, by = c("loa","subg"))
merged <- merge(actb,M0, by = c("loa","subg"))
merged$b.x/merged$b.y
0.02/0.2
merged <- merge(actb,M0, by = c("loa","subg","t"))
merged <- merge(actb,M0, by = c("loa","subg"))
merged <- merge(actb,M0, by.x = c("loa","subg"))
merged <- merge(actb,M0, by = c("loa","subg"))
merged
actb <- with(EST$IND, EST$IND[measure=="actb",])
M0 <- with(EST$AF, EST$AF[measure=="M0",])
merged <- merge(actb,M0, by = c("loa","subg"))
merged
merged <- merge(actb,M0, by = c("loa","subg"), all.x = T)
merged
merged$pctb <- merged$b.x/merged$b.y
merged
merged <- merge(actb,M0, by = c("loa","subg"), all.x = T, sort = FALSE)
merged
actb
merged <- merge(actb,M0, by = c("loa","subg"), all.x = T, sort = FALSE, no.dups = FALSE)
merged
merged <- merge(actb,M0, by = c("loa","subg","k"), all.x = T, sort = FALSE, no.dups = FALSE)
merged
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(20), measure = "M0",
weights = "equal", over = c("area"), multicore = TRUE)
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t"
weights = "equal", over = c("area"), multicore = TRUE)
actb <- with(EST$IND, EST$IND[measure=="actb",])
M0 <- with(EST$AF, EST$AF[measure=="M0",])
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
actb <- with(EST$IND, EST$IND[measure=="actb",])
EST$AF
rm(EST)
df <- chickwts
head(df)
View(df)
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb"),
b = c(0.1, 0.2, 0.2, 0.01, 0.02, 0.02)
)
data
group_mean <- aggregate(b ~ loa + sub, data = data, mean)
aggregate(b ~ loa + subg, data = data, mean)
aggregate(b ~ loa + subg, data = data, function(x) data$x[measure = "M0",])
aggregate(b ~ loa + subg, data = data, function(x) data$x[measure = "M0",]/data$x[measure = "M0",])
aggregate(b ~ loa + subg, data = data, function(x) data$x[measure = "actb",]/data$x[measure = "M0",])
aggregate(b ~ loa + subg, data = data, function(x) data$x[measure == "actb",]/data$x[measure == "M0",])
aggregate(b ~ loa + subg, data = data, function(x) data$x[data$measure == "actb",]/data$x[data$measure == "M0",])
aggregate(b ~ loa + subg, data = data, function(x, data) data$x[data$measure == "actb",]/data$x[data$measure == "M0",])
aggregate(b ~ loa + subg, data = data, function(x, data) data$x[data$measure == "actb",]/data$x[data$measure == "M0",], data = data)
aggregate(b ~ loa + subg, data = data, function(x, y) y$x[y$measure == "actb",]/y$x[y$measure == "M0",], y = data)
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area","nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1","nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb","actb", "actb", "actb"),
indicator = c(NA,NA,NA,"ind1","ind1","ind1","ind2","ind2","ind2")
b = c(0.2, 0.2, 0.2, 0.1, 0.1, 0.1,0.1,0.1,0.1)
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area","nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1","nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb","actb", "actb", "actb"),
indicator = c(NA,NA,NA,"ind1","ind1","ind1","ind2","ind2","ind2")
b = c(0.2, 0.2, 0.2, 0.1, 0.1, 0.1,0.1,0.1)
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area","nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1","nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb","actb", "actb", "actb"),
indicator = c(NA,NA,NA,"ind1","ind1","ind1","ind2","ind2","ind2"),
b = c(0.2, 0.2, 0.2, 0.1, 0.1, 0.1,0.1,0.1)
)
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area","nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1","nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb","actb", "actb", "actb"),
indicator = c(NA,NA,NA,"ind1","ind1","ind1","ind2","ind2","ind2"),
b = c(0.2, 0.2, 0.2, 0.1, 0.1, 0.1,0.1,0.1,0.1)
)
data
0.1/0.2
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area","nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1","nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb","actb", "actb", "actb"),
indicator = c(NA,NA,NA,"ind1","ind1","ind1","ind2","ind2","ind2"),
b = c(0.2, 0.2, 0.2, 0.1, 0.1, 0.1,0.1,0.1,0.1)
)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ measure, data = data)
# Calculate the division of b based on measure, grouped by loa and subg
result <- aggregate(b ~ measure, data = data, mean)
# Calculate the division of b based on measure, grouped by loa and subg
aggregate(b ~ measure, data = data, mean)
#pctb
# Given data frame
data <- data.frame(
loa = c("nat", "area", "area", "nat", "area", "area","nat", "area", "area"),
subg = c("nat", "0", "1", "nat", "0", "1","nat", "0", "1"),
measure = c("M0", "M0", "M0", "actb", "actb", "actb","actb", "actb", "actb"),
indicator = c(NA,NA,NA,"ind1","ind1","ind1","ind2","ind2","ind2"),
b = c(0.2, 0.2, 0.2, 0.1, 0.1, 0.1,0.1,0.1,0.1)
)
data.frame(
measure = c("M0","actb"),b=c(0.2,0,1)
)
data.frame(
measure = c("M0","actb"),b=c(0.2,0.1)
)
mynewList <- list(a = c(1, 2, 3, "f"), b = c(4, 5, 6), c= c(9,10), d=list(1,2))
lapply(mynewList, function(x) {
x <- unlist(x)
length(x) <- max(lengths(mynewList))
return(x)
})
devtools::load_all()
data <- subset(syn_cdta)
data <- na.omit(data)
svydata <- survey::svydesign(id=~psu, weights = ~weight, strata = ~stratum, data = data)
indicators <- c("d_nutr","d_cm",
"d_satt","d_educ",
"d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst")
indicators <- list(d1 = c("d_nutr","d_cm"),
d2 = c("d_satt","d_educ"),
d3 = c("d_elct","d_sani","d_wtr","d_hsg","d_ckfl","d_asst"))
SET <- mpitb.set(svydata, indicators = indicators, name = "myname", desc = "pref. desc")
SET
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
VecArgs
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = c("hdk","actb"), tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H","hdk"),multicore = TRUE)
devtools::load_all()
EST <- mpitb.est(set = SET, klist = c(33), measure = c("M0"), indmeasures = NULL, tvar = "t",
weights = "equal", over = c("area"), cotmeasures = c("M0","H"),multicore = TRUE)
